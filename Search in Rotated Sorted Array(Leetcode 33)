class Solution {
public:
    int pivotindex(vector<int> nums , int target) {
        int s = 0, e = nums.size()-1;
        while(s < e) {
            int m = s +(e-s)/2;
            if(nums[m] >= nums[0]) {
                s = m + 1;
            }else{
                e = m;
            }
        }
        return e;
    }
    int binarySearch(vector<int>& nums, int s, int e,int target){
        while(s <= e) {
            int m = s +(e-s)/2;
            if(nums[m] == target) {
               return m;
            }else if(nums[m] > target){
                e = m -1;
            }else{
                s = m +1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int pivot = pivotindex(nums,target);

        int ans = binarySearch(nums,0,pivot-1,target);
        int ans2 = binarySearch(nums,pivot,nums.size()-1,target);

        if(ans != -1) {
            return ans;
        }
        if(ans2 != -1) {
            return ans2;
        }
        return -1;
    }
};
