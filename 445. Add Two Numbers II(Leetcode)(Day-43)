    ListNode* reverse(ListNode* head) {
        ListNode* pre = NULL;
        ListNode* curr = head;
        while(curr != NULL) {
            ListNode* forward = curr->next;
            curr->next = pre;
            pre = curr;
            curr = forward;
        }
        return pre;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
                return l2;
        if(l2 == NULL)
                return l1; 

        //step1 : reverse both linked list
        l1 = reverse(l1);
        l2 = reverse(l2);

        //step2: add both linked list
        ListNode* ansHead = NULL;
        ListNode* ansTail = NULL;
        int carry = 0;

        while(l1 != NULL && l2 != NULL) {
                //calculate sum
                int sum = carry + l1 -> val + l2 -> val;
                //find digit to create node for
                int digit = sum % 10;
                //calculate carry
                carry = sum / 10;

                //create a new ListNode for the digit
                ListNode* newNode = new ListNode(digit);
                //attach the newNode into the answer wali linked list
                if(ansHead == NULL) {
                        //first node insert krre ho
                        ansHead = newNode;
                        ansTail = newNode;
                }
                else {
                        ansTail -> next = newNode;
                        ansTail = newNode;
                }
                l1 = l1 -> next;
                l2 = l2 -> next;
        }

        //jab l1 list ki length l2 list se jada hogi
        while(l1 != NULL) {
                int sum = carry + l1 -> val;
                int digit = sum % 10;
                carry = sum / 10;
                ListNode* newNode = new ListNode(digit);
                ansTail -> next = newNode;
                ansTail = newNode;
                l1 = l1 -> next;
        }

        //jab l2 list ki length l1 list se jada hogi
        while(l2 != NULL) {
                int sum = carry + l2 -> val;
                int digit = sum % 10;
                carry = sum / 10;
                ListNode* newNode = new ListNode(digit);
                ansTail -> next = newNode;
                ansTail = newNode;
                l2 = l2 -> next;
        }

        //handle carry ko alag se
        while(carry != 0) {
                int sum = carry;
                int digit = sum % 10;
                carry = sum / 10;
                ListNode* newNode = new ListNode(digit);
                ansTail -> next = newNode;
                ansTail = newNode;
        }


        //step3: reverse the ans linked list
        ansHead = reverse(ansHead);
        return ansHead;
    }
};
