/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//recursive method
    ListNode* merge(ListNode* list1, ListNode* list2) {
        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;
        
        // ListNode* ans = new node();
        if(list1->val < list2->val) {
            list1-> next = merge(list1->next,list2);
            return list1;
        }
        else{
            list2->next = merge(list1,list2->next);
            return list2;
        }
    }
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        return merge(list1,list2);
        
    }

  //iterative method
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* ans = new ListNode(0);
        ListNode* head = ans;

        while(l1 != NULL && l2 != NULL) {
            if(l1->val > l2->val) {
                head->next = l2;
                l2 = l2->next;
            }else{
                head->next = l1;
                l1 = l1->next;
            }
            head = head->next;
        }
        if(l1 != NULL) {
            head->next = l1;
        }else{
            head->next = l2;
        }
        return ans->next;
    }
};
