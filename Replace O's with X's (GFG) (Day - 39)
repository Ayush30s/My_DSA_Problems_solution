class Solution{
public:

    // to check wether the cell we are going to reach is a valid one and it should not be visited before and the cell we are looking for must contain O
    bool isSafe(int r, int c , vector<vector<char>>& mat , vector<vector<int>>& visited) { 
        if((r >= 0 && r < mat.size()) && (c >=0 && c < mat[0].size()) && visited[r][c] == 0 && mat[r][c] == 'O'){
            return true;
        }
        return false;
    }

//applying dfs algoritm to find all the connected zeroes to that one which is at the boundary of the mat that we have found while iterating row and col
    void dfs(int r, int c, vector<vector<char>>& mat , vector<vector<int>>& visited) {
        
        visited[r][c] = 1;// if we get 0 at given r and c mark it visited in visited 2-d array so that we don't change them to X's while checking for those  O's that need to be converted
        //check if the following of the contains zero
        //right  
        if(isSafe(r,c+1,mat,visited)) {
            dfs(r,c+1,mat,visited);
        }
        
        //left
        if(isSafe(r,c-1,mat,visited)) {
            dfs(r,c-1,mat,visited);
        }
        
        //up
        if(isSafe(r-1,c,mat,visited)) {
            dfs(r-1,c,mat,visited);
        }
        
        //down
        if(isSafe(r+1,c,mat,visited)) {
            dfs(r+1,c,mat,visited);
        }
    }
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        // code here
        vector<vector<int>> visited(n,vector<int>(m,0));
        
        for(int i = 0 ; i < n ; i++) {// checking if the column side boundary cintains O or not
            //first col
            if(mat[i][0] == 'O' && visited[i][0] == 0) {
                dfs(i,0,mat,visited);
            }
            
            //last col
            if(mat[i][m-1] == 'O' && visited[i][m-1] == 0) {
                dfs(i,m-1,mat,visited);
            }
        }
        
        for(int i = 0 ; i < m ; i++) {// checking if the row side boundary cintains O or not
            //first row
            if(mat[0][i] == 'O' && visited[0][i] == 0) {
                dfs(0,i,mat,visited);
            }
            
            //last row
            if(mat[n-1][i] == 'O' && visited[n-1][i] == 0) {
                dfs(n-1,i,mat,visited);
            }
        }
        
        //iterate over visited boundary values
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if(mat[i][j] == 'O' && visited[i][j] == 0) {  //if the current cell is O and it ias not visisted it means the currnet O 
                                                              //containing cell is not adjacent to any of boundary O's
                                                              //(or the cell is surrouded by X only) so we can replace it with X
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }
};
