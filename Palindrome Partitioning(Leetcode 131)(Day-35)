class Solution {
public:
    bool isPalindrome(string ss, int s , int e) { check wether the s to e range substring is palindrome or not
        while(s < e) {
            if(ss[s] != ss[e]) {
                return false;
            }
            s++;
            e--;
        }
        return true;
    }

    void solve(string& s, vector<vector<string>>& ans, vector<string>& substrs, int index) {
        //base case
        if(index == s.length()) {
            ans.push_back(substrs);                                         // when you get one vector of string containing
                                                                            // palindromic substring store it into the ans
        }
        for(int i = index ; i < s.length() ; i++) {                         // we always start with index 
            if(isPalindrome(s,index,i)){                                    // if the substr is palinfrome then only go for
                                                                            // furthur process
                substrs.push_back(s.substr(index,i-index+1));
                solve(s,ans,substrs,i+1);
                substrs.pop_back();                                         // Backtracking
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> ss;
        solve(s,ans,ss,0);
        return ans;
    }
};
